#!/bin/bash
# Check that the source conforms to the pre-commit framework
# Args are expected as GIT_SHA1 as $1, PROJECT_SOURCE as $2, JOB_TYPE as $3

if [ $# -ne 3 ]; then
  echo "Usage: ./pre-commit branch-sha1 project-root job-type"
  echo "  job_type=master|pull-request  "
  exit 1
fi

GIT_SHA=$1
PROJECT_SOURCE=$2
JOB_TYPE=$3

cd "$PROJECT_SOURCE" || exit 127

if [[ $JOB_TYPE == "pull-request" ]]; then
  # Find the HEAD of the commit sha
  BASE_SHA=$(git merge-base HEAD^2 HEAD^1)

  PRE_COMMIT_VERSION=$(pre-commit --version)
  # If using the snap version (No longer updated but it doesn't use pip on ubuntu, so it's better to be outdated here) run
  # Using the older source
  if [[ ${PRE_COMMIT_VERSION} < "pre-commit 1.22.0" ]]; then
    SCRIPT_OUTPUT=$(pre-commit run --origin "${BASE_SHA}" --source "${GIT_SHA}" --show-diff-on-failure --verbose)
  else
    SCRIPT_OUTPUT=$(pre-commit run --from-ref "${BASE_SHA}" --to-ref "${GIT_SHA}" --show-diff-on-failure --verbose)
  fi
elif [[ $JOB_TYPE == "master" ]]; then
  SCRIPT_OUTPUT=$(pre-commit run --all-files)
else
  echo "JOB_TYPE not set, add a 3rd argument (e.g. master or pull-request)"
  exit 1
fi

EXIT_CODE=$?
# If last job was a failure echo out how to fix it locally
if [ $EXIT_CODE -ne 0 ]; then
  echo "
Pre-commit checks have failed, if you have the pre-commit framework installed locally you can fix this using the following command, otherwise check this file for the pre-commit output to fix manually.
Run this command in the repository locally to fix:
  pre-commit run --from-ref ${BASE_SHA} --to-ref ${GIT_SHA}
If this does not work you may have an older version of pre-commit, try:
  pre-commit run --origin ${BASE_SHA} --source ${GIT_SHA}
Or if this was run on all files:
  pre-commit run --all-files
Pre-commit output:
${SCRIPT_OUTPUT}
"
else
  echo "${SCRIPT_OUTPUT}"
fi

# Perform cleanup of unused commit repos.
pre-commit gc

exit $EXIT_CODE
